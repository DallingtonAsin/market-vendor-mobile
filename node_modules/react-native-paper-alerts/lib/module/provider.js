import React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';
import { Platform } from 'react-native';
import { Animated, Easing, Keyboard, StyleSheet } from 'react-native';
import { Button, Dialog, Paragraph, Portal, TextInput, useTheme } from 'react-native-paper';
import AlertsContext from './context';
import reducer, { initialState } from './reducer';
const keyboardEvents = Platform.select({
  default: {
    show: 'keyboardDidShow',
    hide: 'keyboardDidHide'
  },
  ios: {
    show: 'keyboardWillShow',
    hide: 'keyboardWillHide'
  }
});

const AlertsProvider = ({
  children
}) => {
  var _state$options$width, _state$options$inputL, _state$options$loginI, _state$options$passwo;

  const [state, dispatch] = useReducer(reducer, initialState);
  const [value, setValue] = useState('');
  const [password, setPassword] = useState('');
  const dismiss = useCallback(() => dispatch({
    type: 'DISMISS',
    payload: {}
  }), []);
  const alerts = useMemo(() => ({
    alert: (title, message, button, options) => dispatch({
      type: 'ALERT',
      payload: {
        title,
        message,
        button,
        ...(options && {
          options
        }),
        visible: true
      }
    }),
    prompt: (title, message, callbackOrButtons, type, defaultValue, keyboardType, options) => {
      setValue(defaultValue !== null && defaultValue !== void 0 ? defaultValue : '');
      setPassword('');

      if (typeof callbackOrButtons === 'function') {
        switch (type) {
          case 'plain-text':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                prompt: [{
                  text: 'Ok',
                  onPress: callbackOrButtons
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'secure-text':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                secureTextEntry: true,
                prompt: [{
                  text: 'Ok',
                  onPress: callbackOrButtons
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'login-password':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                login: [{
                  text: 'Ok',
                  onPress: callbackOrButtons
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'default':
            return dispatch({
              type: 'ALERT',
              payload: {
                title,
                message,
                button: [{
                  text: 'Ok',
                  onPress: callbackOrButtons
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          default:
            dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                prompt: [{
                  text: 'Ok',
                  onPress: callbackOrButtons
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });
        }
      } else if (typeof callbackOrButtons === 'undefined') {
        switch (type) {
          case 'plain-text':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                prompt: [{
                  text: 'Ok'
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'secure-text':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                secureTextEntry: true,
                prompt: [{
                  text: 'Ok'
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'login-password':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                login: [{
                  text: 'Ok'
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'default':
            return dispatch({
              type: 'ALERT',
              payload: {
                title,
                message,
                button: [{
                  text: 'Ok'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          default:
            dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                prompt: [{
                  text: 'Ok'
                }, {
                  text: 'Cancel',
                  style: 'cancel'
                }],
                ...(options && {
                  options
                }),
                visible: true
              }
            });
        }
      } else {
        switch (type) {
          case 'plain-text':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                prompt: callbackOrButtons,
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'secure-text':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                secureTextEntry: true,
                prompt: callbackOrButtons,
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'login-password':
            return dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                login: callbackOrButtons,
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          case 'default':
            return dispatch({
              type: 'ALERT',
              payload: {
                title,
                message,
                button: callbackOrButtons,
                ...(options && {
                  options
                }),
                visible: true
              }
            });

          default:
            dispatch({
              type: 'PROMPT',
              payload: {
                title,
                message,
                keyboardType,
                prompt: callbackOrButtons,
                ...(options && {
                  options
                }),
                visible: true
              }
            });
        }
      }
    }
  }), []);
  const theme = useTheme();
  const translateY = useRef(new Animated.Value(0));
  const onKeyboardShown = useCallback(height => Animated.timing(translateY.current, {
    toValue: -height,
    duration: 250,
    easing: Easing.ease,
    useNativeDriver: true
  }).start(), []);
  const onKeyboardHidden = useCallback(() => Animated.timing(translateY.current, {
    toValue: 0,
    duration: 250,
    easing: Easing.ease,
    useNativeDriver: true
  }).start(), []);
  useEffect(() => {
    if (state.visible) {
      Keyboard.addListener(keyboardEvents.show, e => onKeyboardShown(e.endCoordinates.height / 2));
      Keyboard.addListener(keyboardEvents.hide, () => onKeyboardHidden());
    }

    return () => {
      onKeyboardHidden();
      Keyboard.removeAllListeners(keyboardEvents.show);
      Keyboard.removeAllListeners(keyboardEvents.hide);
    };
  }, [onKeyboardHidden, onKeyboardShown, state.visible]);
  return /*#__PURE__*/React.createElement(AlertsContext.Provider, {
    value: alerts
  }, children, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Animated.View, {
    pointerEvents: "box-none",
    style: [styles.animate, {
      transform: [{
        translateY: translateY.current
      }]
    }]
  }, /*#__PURE__*/React.createElement(Dialog, {
    visible: state.visible,
    dismissable: state.options.cancelable,
    onDismiss: () => {
      if (state.options.cancelable) {
        var _state$options$onDism, _state$options;

        (_state$options$onDism = (_state$options = state.options).onDismiss) === null || _state$options$onDism === void 0 ? void 0 : _state$options$onDism.call(_state$options);
      }

      dismiss();
    },
    style: [styles.web, { ...(state.options.width && {
        width: state.options.width,
        alignSelf: 'center',
        maxWidth: state.options.width
      })
    }, { ...(state.options.maxWidth && {
        maxWidth: (_state$options$width = state.options.width) !== null && _state$options$width !== void 0 ? _state$options$width : state.options.maxWidth
      })
    }]
  }, state.title ? /*#__PURE__*/React.createElement(Dialog.Title, null, state.title) : null, state.message ? /*#__PURE__*/React.createElement(Dialog.Content, null, /*#__PURE__*/React.createElement(Paragraph, null, state.message)) : null, state.prompt ? /*#__PURE__*/React.createElement(Dialog.Content, null, /*#__PURE__*/React.createElement(TextInput, {
    autoFocus: state.options.autoFocus,
    mode: state.options.inputAppearance,
    label: (_state$options$inputL = state.options.inputLabel) !== null && _state$options$inputL !== void 0 ? _state$options$inputL : state.secureTextEntry ? 'Password' : undefined,
    value: value,
    onChangeText: setValue,
    secureTextEntry: state.secureTextEntry,
    keyboardAppearance: state.options.keyboardAppearance,
    keyboardType: state.keyboardType
  })) : state.login ? /*#__PURE__*/React.createElement(Dialog.Content, null, /*#__PURE__*/React.createElement(TextInput, {
    autoFocus: state.options.autoFocus,
    mode: state.options.inputAppearance,
    label: (_state$options$loginI = state.options.loginInputLabel) !== null && _state$options$loginI !== void 0 ? _state$options$loginI : 'Login',
    value: value,
    onChangeText: setValue,
    keyboardAppearance: state.options.keyboardAppearance,
    keyboardType: state.keyboardType,
    style: styles.login
  }), /*#__PURE__*/React.createElement(TextInput, {
    mode: state.options.inputAppearance,
    label: (_state$options$passwo = state.options.passwordInputLabel) !== null && _state$options$passwo !== void 0 ? _state$options$passwo : 'Password',
    value: password,
    onChangeText: setPassword,
    keyboardAppearance: state.options.keyboardAppearance,
    keyboardType: state.keyboardType,
    secureTextEntry: true
  })) : null, state.button ? /*#__PURE__*/React.createElement(Dialog.Actions, {
    style: state.options.stacked && styles.stacked
  }, state.button.map(btn => /*#__PURE__*/React.createElement(Button, {
    key: btn.text,
    onPress: () => {
      var _btn$onPress;

      (_btn$onPress = btn.onPress) === null || _btn$onPress === void 0 ? void 0 : _btn$onPress.call(btn);
      dismiss();
    },
    color: btn.style === 'destructive' ? theme.colors.error : btn.style === 'cancel' ? theme.colors.text : theme.colors.primary,
    uppercase: state.options.uppercase
  }, btn.text))) : state.prompt ? /*#__PURE__*/React.createElement(Dialog.Actions, {
    style: state.options.stacked && styles.stacked
  }, state.prompt.map(btn => /*#__PURE__*/React.createElement(Button, {
    key: btn.text,
    onPress: () => {
      var _btn$onPress2;

      (_btn$onPress2 = btn.onPress) === null || _btn$onPress2 === void 0 ? void 0 : _btn$onPress2.call(btn, value);
      dismiss();
    },
    color: btn.style === 'destructive' ? theme.colors.error : btn.style === 'cancel' ? theme.colors.text : theme.colors.primary,
    uppercase: state.options.uppercase
  }, btn.text))) : state.login ? /*#__PURE__*/React.createElement(Dialog.Actions, {
    style: state.options.stacked && styles.stacked
  }, state.login.map(btn => /*#__PURE__*/React.createElement(Button, {
    key: btn.text,
    onPress: () => {
      var _btn$onPress3;

      (_btn$onPress3 = btn.onPress) === null || _btn$onPress3 === void 0 ? void 0 : _btn$onPress3.call(btn, {
        login: value,
        password
      });
      dismiss();
    },
    color: btn.style === 'destructive' ? theme.colors.error : btn.style === 'cancel' ? theme.colors.text : theme.colors.primary,
    uppercase: state.options.uppercase
  }, btn.text))) : /*#__PURE__*/React.createElement(Dialog.Actions, null, /*#__PURE__*/React.createElement(Button, {
    onPress: dismiss,
    uppercase: state.options.uppercase
  }, "Ok"))))));
};

const styles = StyleSheet.create({
  stacked: {
    flexDirection: 'column',
    alignItems: 'flex-end'
  },
  animate: {
    flex: 1,
    marginVertical: -300
  },
  login: {
    marginBottom: 16
  },

  /** This is ugly and we should do better */
  web: Platform.OS === 'web' ? {
    maxWidth: 560,
    alignSelf: 'center'
  } : {}
});
export default AlertsProvider;
//# sourceMappingURL=provider.js.map